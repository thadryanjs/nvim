diff --git a/init.lua b/init.lua
index 91b5793..ba45f97 100644
--- a/init.lua
+++ b/init.lua
@@ -2,5 +2,3 @@ require 'config.global'
 require 'config.lazy'
 require 'config.autocommands'
 require 'config.keymap'
-
-
diff --git a/lua/config/autocommands.lua b/lua/config/autocommands.lua
index e8058a2..5d233f0 100644
--- a/lua/config/autocommands.lua
+++ b/lua/config/autocommands.lua
@@ -1,34 +1,34 @@
 local function set_terminal_keymaps()
-  local opts = { buffer = 0 }
-  vim.keymap.set('t', '<esc>', [[<C-\><C-n>]], opts)
-  vim.keymap.set('t', '<C-h>', [[<Cmd>wincmd h<CR>]], opts)
-  vim.keymap.set('t', '<C-j>', [[<Cmd>wincmd j<CR>]], opts)
-  vim.keymap.set('t', '<C-k>', [[<Cmd>wincmd k<CR>]], opts)
-  vim.keymap.set('t', '<C-l>', [[<Cmd>wincmd l<CR>]], opts)
+    local opts = { buffer = 0 }
+    vim.keymap.set('t', '<esc>', [[<C-\><C-n>]], opts)
+    vim.keymap.set('t', '<C-h>', [[<Cmd>wincmd h<CR>]], opts)
+    vim.keymap.set('t', '<C-j>', [[<Cmd>wincmd j<CR>]], opts)
+    vim.keymap.set('t', '<C-k>', [[<Cmd>wincmd k<CR>]], opts)
+    vim.keymap.set('t', '<C-l>', [[<Cmd>wincmd l<CR>]], opts)
 end

 vim.api.nvim_create_autocmd({ "FocusGained", "BufEnter" }, {
-  pattern = { "*" },
-  command = "checktime",
+    pattern = { "*" },
+    command = "checktime",
 }
 )

 vim.api.nvim_create_autocmd({ "TermOpen" }, {
-  pattern = { "*" },
-  callback = function(_)
-    vim.cmd.setlocal 'nonumber'
-    set_terminal_keymaps()
-  end
+    pattern = { "*" },
+    callback = function(_)
+        vim.cmd.setlocal 'nonumber'
+        set_terminal_keymaps()
+    end
 }
 )


 vim.api.nvim_create_autocmd({ "BufWritePre" }, {
-  pattern = { "*" },
-  command = [[%s/\s\+$//e]],
+    pattern = { "*" },
+    command = [[%s/\s\+$//e]],
 })

--- autocmd FileType r inoremap <buffer> > <Esc>:normal! a %>%<CR>a
--- autocmd FileType rnoweb inoremap <buffer> > <Esc>:normal! a %>%<CR>a
--- autocmd FileType rmd inoremap <buffer> > <Esc>:normal! a %>%<CR>a
+-- autocmd FileType r inoremap <buffer> > <Esc>:normal! a %>%<CR>a
+-- autocmd FileType rnoweb inoremap <buffer> > <Esc>:normal! a %>%<CR>a
+-- autocmd FileType rmd inoremap <buffer> > <Esc>:normal! a %>%<CR>a
 --autocmd BufWritePre * :%s/\s\+$//e
diff --git a/lua/config/global.lua b/lua/config/global.lua
index c044750..7384676 100644
--- a/lua/config/global.lua
+++ b/lua/config/global.lua
@@ -73,7 +73,7 @@ vim.opt.cmdheight = 1

 -- https://stackoverflow.com/questions/69290794/nvim-lsp-change-lspconfig-diagnostic-message-location
 vim.diagnostic.config({
-  virtual_text = false
+    virtual_text = false
 })
 -- Show line diagnostics automatically in hover window
 vim.o.updatetime = 250
@@ -95,25 +95,25 @@ vim.g.boo_colorscheme_italic = false
 -- don't need cmdline if I have status line and fine cmdline (When authenticating Copilot, I have to undo this)
 -- vim.cmd("set cmdheight=0")

-
+vim.g.jukit_mappings = 0

 -- commands

 vim.api.nvim_create_user_command(
-  'TelescopeBookmarks',
-  function(input)
-      vim.cmd("lua require('telescope').extensions.vim_bookmarks.all({width_text=45})")
-  end,
-  {}
+    'TelescopeBookmarks',
+    function(input)
+        vim.cmd("lua require('telescope').extensions.vim_bookmarks.all({width_text=45})")
+    end,
+    {}
 )


 vim.api.nvim_create_user_command(
-  'TelescopeBookmarksCurrentFile',
-  function(input)
-      vim.cmd("lua require('telescope').extensions.vim_bookmarks.current_file({width_text=45})")
-  end,
-  {}
+    'TelescopeBookmarksCurrentFile',
+    function(input)
+        vim.cmd("lua require('telescope').extensions.vim_bookmarks.current_file({width_text=45})")
+    end,
+    {}
 )


diff --git a/lua/config/keymap.lua b/lua/config/keymap.lua
index c27ba16..6ff39ff 100644
--- a/lua/config/keymap.lua
+++ b/lua/config/keymap.lua
@@ -1,6 +1,6 @@
 local wk = require("which-key")

-P = function(x)
+p = function(x)
     print(vim.inspect(x))
     return (x)
 end
@@ -110,6 +110,7 @@ nmap('L', '<cmd>tabnext<cr>')

 -- custom extra
 nmap('<c-b>', ':Neotree toggle dir=%:p:h<cr>')
+nmap('<space>nf', '<S-v>gF')

 local function toggle_light_dark_theme()
     if vim.o.background == 'light' then
@@ -181,7 +182,8 @@ wk.register(
         },
         f = {
             name = 'find (telescope)',
-            o = { ':TelescopeBookmarks<cr>', 'bookmarks (all)' },
+            w = { ':Telescope workspaces<CR>', 'workspaces' },
+            o = { ':TelescopeBookmarks<CR>', 'bookmarks (all)' },
             u = { ':TelescopeBookmarksCurrentFile<cr>', 'bookmarks (current file)' },
             f = { '<cmd>Telescope find_files<cr>', 'files' },
             h = { '<cmd>Telescope help_tags<cr>', 'help' },
@@ -251,10 +253,10 @@ wk.register(
             }
         },
         n = {
-            name = "neorg",
-            w = { ":Neorg workspace ", "neorg workspaces" }, -- have to hit <space> after
-            r = { ":Neorg return<cr>", "neorg return"},
-            h = { ":Neorg workspace home<cr>", "neorg home"}
+            name = "navigation",
+            w = { ":Alpha<cr>", "welcome screen"},
+            h = { ":e /home/thadryan/Documents/Vault/workspaces-overview.md<cr> ", "workspace overview"},
+
         },
         -- t = {
         --     name = "task",
@@ -319,6 +321,5 @@ wk.register({
     ['<m-i>'] = { '```{r}<cr>```<esc>O', "r code chunk" },
     ['<cm-i>'] = { '<esc>o```{python}<cr>```<esc>O', "r code chunk" },
     ['<m-I>'] = { '<esc>o```{python}<cr>```<esc>O', "r code chunk" },
-    --['<m-t>'] = { '- [ ] ', "obsidian task" },
-    ['<m-t>'] = { '- | |', "norg task" },
+    ['<m-t>'] = { '- [ ] ', "markdown task" },
 }, { mode = 'i' })
diff --git a/lua/config/lazy.lua b/lua/config/lazy.lua
index 068c615..f38230d 100644
--- a/lua/config/lazy.lua
+++ b/lua/config/lazy.lua
@@ -2,41 +2,41 @@
 --  <https://github.com/folke/lazy.nvim>
 local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
 if not vim.loop.fs_stat(lazypath) then
-  vim.fn.system({
-    "git",
-    "clone",
-    "--filter=blob:none",
-    "--single-branch",
-    "https://github.com/folke/lazy.nvim.git",
-    lazypath,
-  })
+    vim.fn.system({
+        "git",
+        "clone",
+        "--filter=blob:none",
+        "--single-branch",
+        "https://github.com/folke/lazy.nvim.git",
+        lazypath,
+    })
 end
 vim.opt.runtimepath:prepend(lazypath)

 require("lazy").setup("plugins", {
-  defaults = {
-    version = "*",
-  },
-  dev = {
-    path = "~/projects",
-  },
-  install = { colorscheme = { "catppuccin", "habamax" } },
-  -- checker = { enabled = true },
-  rtp = {
-    disabled_plugins = {
-      "gzip",
-      "matchit",
-      "matchparen",
-      "netrwPlugin",
-      "tarPlugin",
-      "tohtml",
-      "tutor",
-      "zipPlugin",
+    defaults = {
+        version = "*",
     },
-  },
-  change_detection = {
-    -- automatically check for config file changes and reload the ui
-    enabled = true,
-    notify = false,     -- get a notification when changes are found
-  },
-})
\ No newline at end of file
+    dev = {
+        path = "~/projects",
+    },
+    install = { colorscheme = { "catppuccin", "habamax" } },
+    -- checker = { enabled = true },
+    rtp = {
+        disabled_plugins = {
+            "gzip",
+            "matchit",
+            "matchparen",
+            "netrwPlugin",
+            "tarPlugin",
+            "tohtml",
+            "tutor",
+            "zipPlugin",
+        },
+    },
+    change_detection = {
+        -- automatically check for config file changes and reload the ui
+        enabled = true,
+        notify = false,     -- get a notification when changes are found
+    },
+})
diff --git a/lua/plugins/.jukit/.jukit_info.json b/lua/plugins/.jukit/.jukit_info.json
new file mode 100644
index 0000000..92c7342
--- /dev/null
+++ b/lua/plugins/.jukit/.jukit_info.json
@@ -0,0 +1 @@
+{"terminal": "nvimterm"}
\ No newline at end of file
diff --git a/lua/plugins/colors.lua b/lua/plugins/colors.lua
index cfd0b20..96c0d37 100644
--- a/lua/plugins/colors.lua
+++ b/lua/plugins/colors.lua
@@ -4,83 +4,71 @@ return {
     {"ramojus/mellifluous.nvim"},
     {"DeviusVim/deviuspro.nvim"},
     { 'shaunsingh/nord.nvim' },
-    { 'folke/tokyonight.nvim', config = function()
-        require("tokyonight").setup {
-            styles = {
-                comments = { italic = false },
-                keywords = { italic = false },
+    { 'folke/tokyonight.nvim',
+        config = function()
+            require("tokyonight").setup {
+                styles = {
+                    comments = { italic = false },
+                    keywords = { italic = false },
+                }
             }
-        }

-    end},
+        end},
     { 'EdenEast/nightfox.nvim' },
-    { "catppuccin/nvim", name = "catppuccin", config = function()
-        require("catppuccin").setup {
-            flavour = "mocha", -- mocha, macchiato, frappe, latte
-            term_colors = true,
-            integrations = {
-                nvimtree = true,
-                cmp = true,
-                gitsigns = true,
-                telescope = true,
-                treesitter = true
-            },
-            transparent_background = false,
-        }
-    end
-    },
-    { 'rose-pine/neovim', name = 'rose-pine', config = function()
-        require('rose-pine').setup({
-            --- @usage 'auto'|'main'|'moon'|'dawn'
-            variant = 'auto',
-            --- @usage 'main'|'moon'|'dawn'
-            dark_variant = 'main',
-            bold_vert_split = false,
-            dim_nc_background = false,
-            disable_background = false,
-            disable_float_background = false,
-            disable_italics = true,
+    { 'rose-pine/neovim',
+        name = 'rose-pine',
+        config = function()
+            require('rose-pine').setup({
+                --- @usage 'auto'|'main'|'moon'|'dawn'
+                variant = 'auto',
+                --- @usage 'main'|'moon'|'dawn'
+                dark_variant = 'main',
+                bold_vert_split = false,
+                dim_nc_background = false,
+                disable_background = false,
+                disable_float_background = false,
+                disable_italics = true,

-            --- @usage string hex value or named color from rosepinetheme.com/palette
-            groups = {
-                background = 'base',
-                background_nc = '_experimental_nc',
-                panel = 'surface',
-                panel_nc = 'base',
-                border = 'highlight_med',
-                comment = 'muted',
-                link = 'iris',
-                punctuation = 'subtle',
+                --- @usage string hex value or named color from rosepinetheme.com/palette
+                groups = {
+                    background = 'base',
+                    background_nc = '_experimental_nc',
+                    panel = 'surface',
+                    panel_nc = 'base',
+                    border = 'highlight_med',
+                    comment = 'muted',
+                    link = 'iris',
+                    punctuation = 'subtle',

-                error = 'love',
-                hint = 'iris',
-                info = 'foam',
-                warn = 'gold',
+                    error = 'love',
+                    hint = 'iris',
+                    info = 'foam',
+                    warn = 'gold',

-                headings = {
-                    h1 = 'iris',
-                    h2 = 'foam',
-                    h3 = 'rose',
-                    h4 = 'gold',
-                    h5 = 'pine',
-                    h6 = 'foam',
-                }
-                -- or set all headings at once
-                -- headings = 'subtle'
-            },
+                    headings = {
+                        h1 = 'iris',
+                        h2 = 'foam',
+                        h3 = 'rose',
+                        h4 = 'gold',
+                        h5 = 'pine',
+                        h6 = 'foam',
+                    }
+                    -- or set all headings at once
+                    -- headings = 'subtle'
+                },

-            -- Change specific vim highlight groups
-            -- https://github.com/rose-pine/neovim/wiki/Recipes
-            highlight_groups = {
-                ColorColumn = { bg = 'rose' },
+                -- Change specific vim highlight groups
+                -- https://github.com/rose-pine/neovim/wiki/Recipes
+                highlight_groups = {
+                    ColorColumn = { bg = 'rose' },

-                -- Blend colours against the "base" background
-                CursorLine = { bg = 'foam', blend = 10 },
-                StatusLine = { fg = 'love', bg = 'love', blend = 10 },
-            }
-        })
-        -- vim.cmd('colorscheme rose-pine')
-    end
+                    -- Blend colours against the "base" background
+                    CursorLine = { bg = 'foam', blend = 10 },
+                    StatusLine = { fg = 'love', bg = 'love', blend = 10 },
+                }
+            })
+            -- vim.cmd('colorscheme rose-pine')
+        end
     },

     -- this has a lot of great themes but does something that makes me nuts
@@ -96,19 +84,22 @@ return {
             })
         end
     },
+
     -- color html colors
-    { 'norcalli/nvim-colorizer.lua', config = function()
-        require 'colorizer'.setup {
-            css = { css_fn = true, css = true },
-            'javascript',
-            'html',
-            'r',
-            'rmd',
-            'qmd',
-            'markdown',
-            'python'
-        }
-    end
+    { 'norcalli/nvim-colorizer.lua',
+        config = function()
+
+            require 'colorizer'.setup {
+                css = { css_fn = true, css = true },
+                'javascript',
+                'html',
+                'r',
+                'rmd',
+                'qmd',
+                'markdown',
+                'python'
+            }
+        end
     },


diff --git a/lua/plugins/common.lua b/lua/plugins/common.lua
index b3feadf..8dfcfe1 100644
--- a/lua/plugins/common.lua
+++ b/lua/plugins/common.lua
@@ -1,4 +1,4 @@
 return {
-  -- common dependencies
-  { 'nvim-lua/plenary.nvim' },
+    -- common dependencies
+    { 'nvim-lua/plenary.nvim' },
 }
diff --git a/lua/plugins/copilot.lua b/lua/plugins/copilot.lua
index 73b5ab8..b9e97ba 100644
--- a/lua/plugins/copilot.lua
+++ b/lua/plugins/copilot.lua
@@ -1,5 +1,3 @@
 return {
-    {
-        "github/copilot.vim"
-    }
+    {"github/copilot.vim"}
 }
diff --git a/lua/plugins/debugging.lua b/lua/plugins/debugging.lua
index 4b5e04e..9fb6387 100644
--- a/lua/plugins/debugging.lua
+++ b/lua/plugins/debugging.lua
@@ -1,45 +1,28 @@
 return {
-  { "nvim-neotest/neotest",
-    dependencies = { "nvim-neotest/neotest-python" },
-    config = function()
-      require("neotest").setup {
-        adapters = {
-          require("neotest-python")
-        }
-      }
-    end,
-    keys = {
-      { "<leader>dtt", ":lua require'neotest'.run.run({strategy = 'dap'})<cr>", desc = "test" },
-      { "<leader>dts", ":lua require'neotest'.run.stop()<cr>", desc = "stop test" },
-      { "<leader>dta", ":lua require'neotest'.run.attach()<cr>", desc = "attach test" },
-      { "<leader>dtf", ":lua require'neotest'.run.run(vim.fn.expand('%'))<cr>", desc = "test file" },
-      { "<leader>dts", ":lua require'neotest'.summary.toggle()<cr>", desc = "test summary" },
-    }
-  },

-  -- debug adapter protocol
-  { 'mfussenegger/nvim-dap',
-    dependencies = {
-      { 'rcarriga/nvim-dap-ui',
-        config = function()
-          vim.fn.sign_define('DapBreakpoint', { text = '🦦', texthl = '', linehl = '', numhl = '' })
-          require("dapui").setup()
-        end
-      },
-      { 'mfussenegger/nvim-dap-python',
-        config = function()
-          require('dap-python').setup()
-          require('dap.ext.vscode').load_launchjs('launch.json')
-        end
-      },
+    -- debug adapter protocol
+    { 'mfussenegger/nvim-dap',
+        dependencies = {
+            { 'rcarriga/nvim-dap-ui',
+                config = function()
+                    vim.fn.sign_define('DapBreakpoint', { text = '🦦', texthl = '', linehl = '', numhl = '' })
+                    require("dapui").setup()
+                end
+            },
+            { 'mfussenegger/nvim-dap-python',
+                config = function()
+                    require('dap-python').setup()
+                    require('dap.ext.vscode').load_launchjs('launch.json')
+                end
+            },
+        },
+        keys = {
+            { "<leader>db", ":lua require'dap'.toggle_breakpoint()<cr>", desc = "debug breakpoint" },
+            { "<leader>dc", ": lua require'dap'.continue()<cr>", desc = "debug" },
+            { "<leader>do", ": lua require'dap'.step_over()<cr>", desc = "debug over" },
+            { "<leader>di", ": lua require'dap'.step_into()<cr>", desc = "debug into" },
+            { "<leader>dr", ": lua require'dap'.repl_open()<cr>", desc = "debug repl" },
+            { "<leader>du", ": lua require'dapui'.toggle()<cr>", desc = "debug into" },
+        },
     },
-    keys = {
-      { "<leader>db", ":lua require'dap'.toggle_breakpoint()<cr>", desc = "debug breakpoint" },
-      { "<leader>dc", ": lua require'dap'.continue()<cr>", desc = "debug" },
-      { "<leader>do", ": lua require'dap'.step_over()<cr>", desc = "debug over" },
-      { "<leader>di", ": lua require'dap'.step_into()<cr>", desc = "debug into" },
-      { "<leader>dr", ": lua require'dap'.repl_open()<cr>", desc = "debug repl" },
-      { "<leader>du", ": lua require'dapui'.toggle()<cr>", desc = "debug into" },
-    },
-  },
 }
diff --git a/lua/plugins/dev.lua b/lua/plugins/dev.lua
deleted file mode 100644
index 5549ae2..0000000
--- a/lua/plugins/dev.lua
+++ /dev/null
@@ -1,39 +0,0 @@
-return {
-
-  -- { "folke/neoconf.nvim", cmd = "Neoconf", config = true },
-  -- { "folke/neodev.nvim", config = function()
-  --   require("neodev").setup {}
-  -- end
-  -- },
-
-  -- {'stevearc/profile.nvim',
-  --   config = function()
-  --     local should_profile = os.getenv("NVIM_PROFILE")
-  --     if should_profile then
-  --       require("profile").instrument_autocmds()
-  --       if should_profile:lower():match("^start") then
-  --         require("profile").start("*")
-  --       else
-  --         require("profile").instrument("*")
-  --       end
-  --     end
-  --
-  --     local function toggle_profile()
-  --       local prof = require("profile")
-  --       if prof.is_recording() then
-  --         prof.stop()
-  --         vim.ui.input({ prompt = "Save profile to:", completion = "file", default = "profile.json" }, function(filename)
-  --           if filename then
-  --             prof.export(filename)
-  --             vim.notify(string.format("Wrote %s", filename))
-  --           end
-  --         end)
-  --       else
-  --         prof.start("*")
-  --       end
-  --     end
-  --     vim.keymap.set("", "<f1>", toggle_profile)
-  --   end
-  -- }
-
-}
diff --git a/lua/plugins/editing.lua b/lua/plugins/editing.lua
index b515b81..3053519 100644
--- a/lua/plugins/editing.lua
+++ b/lua/plugins/editing.lua
@@ -1,72 +1,68 @@
 return {
-  { 'tpope/vim-repeat' },
-  { 'tpope/vim-surround' },
-  {
-    'windwp/nvim-autopairs',
-    config = function()
-      require('nvim-autopairs').setup {}
-      require('nvim-autopairs').remove_rule('`')
-    end
-  },
-  -- commenting with e.g. `gcc` or `gcip`
-  -- respects TS, so it works in quarto documents
-  {
-    'numToStr/Comment.nvim',
-    version = nil,
-    branch = 'master',
-    config = true, -- default settings
-  },
-  {
-    "danymat/neogen",
-    dependencies = "nvim-treesitter/nvim-treesitter",
-    config = true
-  },
-  {
-    "chrishrb/gx.nvim",
-    event = { "BufEnter" },
-    dependencies = { "nvim-lua/plenary.nvim" },
-    config = true, -- default settings
-  },
-  { "AckslD/nvim-neoclip.lua",
-  requires = {
-    {'kkharji/sqlite.lua', module = 'sqlite'},
-    -- you'll need at least one of these
-    {'nvim-telescope/telescope.nvim'},
-    {'ibhagwan/fzf-lua'},
-  },
-  config = function()
-    require('neoclip').setup()
-  end,
-  },
-
-  {
-    "nvim-telescope/telescope.nvim",
-    dependencies = {
-      "nvim-lua/plenary.nvim",
-      "debugloop/telescope-undo.nvim",
-      "MattesGroeger/vim-bookmarks",
-      "tom-anders/telescope-vim-bookmarks.nvim"
+    { 'tpope/vim-repeat' },
+    { 'tpope/vim-surround' },
+    {
+        'windwp/nvim-autopairs',
+        config = function()
+            require('nvim-autopairs').setup {}
+            require('nvim-autopairs').remove_rule('`')
+        end
+    },
+    -- commenting with e.g. `gcc` or `gcip`
+    -- respects TS, so it works in quarto documents
+    {
+        'numToStr/Comment.nvim',
+        version = nil,
+        branch = 'master',
+        config = true, -- default settings
+    },
+    {
+        "chrishrb/gx.nvim",
+        event = { "BufEnter" },
+        dependencies = { "nvim-lua/plenary.nvim" },
+        config = true, -- default settings
     },
-    config = function()
-      require("telescope").setup({
-        extensions = {
-          undo = {
-            side_by_side = true,
-            layout_strategy = "vertical",
-            layout_config = {
-              preview_height = 0.8,
-            },
-          },
+    {
+        "AckslD/nvim-neoclip.lua",
+        requires = {
+            {'kkharji/sqlite.lua', module = 'sqlite'},
+            -- you'll need at least one of these
+            {'nvim-telescope/telescope.nvim'},
+            {'ibhagwan/fzf-lua'},
+        },
+        config = function()
+            require('neoclip').setup()
+        end,
+    },
+
+    {
+        "nvim-telescope/telescope.nvim",
+        dependencies = {
+            "nvim-lua/plenary.nvim",
+            "debugloop/telescope-undo.nvim",
+            "MattesGroeger/vim-bookmarks",
+            "tom-anders/telescope-vim-bookmarks.nvim"
         },
-      })
-      require("telescope").load_extension("undo")
-      require('telescope').load_extension('vim_bookmarks').setup({})
-      require('telescope').extensions.vim_bookmarks.all({
+        config = function()
+            require("telescope").setup({
+                extensions = {
+                    undo = {
+                        side_by_side = true,
+                        layout_strategy = "vertical",
+                        layout_config = {
+                            preview_height = 0.8,
+                        },
+                    },
+                },
+            })
+            require("telescope").load_extension("undo")
+            require('telescope').load_extension('vim_bookmarks').setup({})
+            require('telescope').extensions.vim_bookmarks.all({

-      })
-      -- require('telescope').extensions.vim_bookmarks.current_file()
+            })
+            -- require('telescope').extensions.vim_bookmarks.current_file()

-      -- optional: vim.keymap.set("n", "<leader>u", "<cmd>Telescope undo<cr>")
-    end,
-  }
+            -- optional: vim.keymap.set("n", "<leader>u", "<cmd>Telescope undo<cr>")
+        end,
+    }
 }
diff --git a/lua/plugins/git.lua b/lua/plugins/git.lua
index 351c17f..2129da6 100644
--- a/lua/plugins/git.lua
+++ b/lua/plugins/git.lua
@@ -1,33 +1,24 @@
 return {
-  -- git and projects
-  -- { 'ThePrimeagen/git-worktree.nvim' },
-  -- { 'sindrets/diffview.nvim' },
-  { 'TimUntersberger/neogit',
-    lazy = true,
-    cmd = 'Neogit',
-    config = function()
-      require('neogit').setup {
-        disable_commit_confirmation = true,
-        integrations = {
-          diffview = true
+    {
+        'TimUntersberger/neogit',
+        lazy = true,
+        cmd = 'Neogit',
+        config = function()
+            require('neogit').setup {
+                disable_commit_confirmation = true,
+                integrations = {
+                    diffview = true
+                }
+            }
+        end
+    },
+    {
+        'akinsho/git-conflict.nvim',
+        config = function()
+            require('git-conflict').setup {
+                default_mappings = true,
+                disable_diagnostics = true,
         }
-      }
     end
-  },
-  { 'lewis6991/gitsigns.nvim', config = function()
-    require('gitsigns').setup {}
-  end
-  },
-  { 'akinsho/git-conflict.nvim', config = function()
-    require('git-conflict').setup {
-      default_mappings = true,
-      disable_diagnostics = true,
-    }
-  end
-  },
-  { 'f-person/git-blame.nvim' },
-  -- github PRs and the like with gh-cli
-  -- { 'pwntester/octo.nvim', config = function()
-  --   require "octo".setup()
-  -- end },
+    },
 }
diff --git a/lua/plugins/jupynium.lua b/lua/plugins/jupynium.lua
deleted file mode 100644
index a587702..0000000
--- a/lua/plugins/jupynium.lua
+++ /dev/null
@@ -1,20 +0,0 @@
-return{
-    {
-    "kiyoon/jupynium.nvim",
-    build = "pip3 install --user .",
-    -- build = "conda run --no-capture-output -n jupynium pip install .",
-    -- enabled = vim.fn.isdirectory(vim.fn.expand "~/miniconda3/envs/jupynium"),
-    config = function()
-        require("jupynium").setup({
-            python_host = { "conda", "run", "--no-capture-output", "-n", "jupy", "python" },
-            jupyter_command = { "conda", "run", "--no-capture-output", "-n", "jupy", "jupyter" },
-            default_notebook_URL = "localhost:8889"
-
-        })
-    end
-
-    }
-  -- "hrsh7th/nvim-cmp",       -- optional, for completion
-  -- "rcarriga/nvim-notify",   -- optional
-  -- "stevearc/dressing.nvim", -- optional, UI for :JupyniumKernelSelect
-}
diff --git a/lua/plugins/kanban.lua b/lua/plugins/kanban.lua
deleted file mode 100644
index a5d0ba2..0000000
--- a/lua/plugins/kanban.lua
+++ /dev/null
@@ -1,11 +0,0 @@
-return {
-    {"arakkkkk/kanban.nvim", config = function()
-        require("kanban").setup({
-        	markdown = {
-        		description_folder = "./tasks/",  -- Path to save the file corresponding to the task.
-        		list_head = "## ",
-        	}
-        })
-    end
-    }
-}
diff --git a/lua/plugins/neorg.lua b/lua/plugins/neorg.lua
deleted file mode 100644
index cb65c2e..0000000
--- a/lua/plugins/neorg.lua
+++ /dev/null
@@ -1,33 +0,0 @@
-return {
-    {"nvim-neorg/neorg",
-    build = ":Neorg sync-parsers",
-    -- dependencies = {{ "nvim-lua/plenary.nvim" }, { "nvim-neorg/neorg-telescope" }},
-    config = function()
-        require("neorg").setup {
-            load = {
-                ["core.defaults"] = {}, -- loads default behaviour
-                -- ["core.concealer"] = {}, -- adds pretty icons to your documents,
-                -- ["core.integrations.telescope"] = {},
-                ["core.export"] = {},
-                ["core.dirman"] = { -- manages neorg workspaces
-                    config = {
-                        workspaces = {
-                            oud = "/home/thadryan/Documents/Vault/Projects/ActiveProjects/0_OUD-prediction",
-                            ideagen = "/home/thadryan/Documents/Vault/Projects/ActiveProjects/1_IdeaGeneration",
-                            contrapption = "/home/thadryan/Documents/Vault/Projects/ActiveProjects/2_ContrApption",
-                            dm = "/home/thadryan/Documents/Vault/Areas/DecisionMaking",
-                            workflow = "/home/thadryan/Documents/Vault/Projects/ActiveProjects/Workflow",
-                            vim = "/home/thadryan/Documents/Vault/Areas/Tech/Vim",
-                            phone = "/home/thadryan/Documents/HomeVault/Projects/TroubleShootPhonePlayback",
-                            vonn = "/home/thadryan/Documents/HomeVault/Projects/VonnegutDeepDive",
-                            home = "/home/thadryan/Documents/Vault"
-                        },
-                        default_workspace = "home"
-                    },
-                },
-            },
-        }
-    end
-
-    }
-}
diff --git a/lua/plugins/neotree.lua b/lua/plugins/neotree.lua
deleted file mode 100644
index 578c64f..0000000
--- a/lua/plugins/neotree.lua
+++ /dev/null
@@ -1,3 +0,0 @@
-return{
-    {"nvim-neo-tree/neo-tree.nvim"}
-}
diff --git a/lua/plugins/quarto.lua b/lua/plugins/quarto.lua
index 1d60527..9892cff 100644
--- a/lua/plugins/quarto.lua
+++ b/lua/plugins/quarto.lua
@@ -1,584 +1,580 @@
 return {

-  {
-    'quarto-dev/quarto-nvim',
-    dev = false,
-    dependencies = {
-      { 'hrsh7th/nvim-cmp' },
-      {
-        'jmbuhr/otter.nvim',
+    {  'quarto-dev/quarto-nvim',
         dev = false,
+        dependencies = {
+            { 'hrsh7th/nvim-cmp' },
+            {
+                'jmbuhr/otter.nvim',
+                dev = false,
+                config = function()
+                    require 'otter'.setup {
+                        lsp = {
+                            hover = {
+                                border = require 'misc.style'.border
+                            }
+                        }
+                    }
+                end,
+            },
+        },
         config = function()
-          require 'otter'.setup {
-            lsp = {
-              hover = {
-                border = require 'misc.style'.border
-              }
+            require 'quarto'.setup {
+                debug = false,
+                closePreviewOnExit = true,
+                lspFeatures = {
+                    enabled = true,
+                    languages = { 'r', 'python', 'julia', 'bash', 'lua' },
+                    chunks = 'curly', -- 'curly' or 'all'
+                    diagnostics = {
+                        enabled = true,
+                        triggers = { "BufWritePost" }
+                    },
+                    completion = {
+                        enabled = true,
+                    },
+                },
+                keymap = {
+                    hover = 'K',
+                    definition = 'gd'
+                },
             }
-          }
-        end,
-      },
-
-      -- optional
-      -- { 'quarto-dev/quarto-vim',
-      --   ft = 'quarto',
-      --   dependencies = { 'vim-pandoc/vim-pandoc-syntax' },
-      --   -- note: needs additional syntax highlighting enabled for markdown
-      --   --       in `nvim-treesitter`
-      --   config = function()
-      -- conceal can be tricky because both
-      -- the treesitter highlighting and the
-      -- regex vim syntax files can define conceals
-      --
-      -- -- see `:h conceallevel`
-      -- vim.opt.conceallevel = 1
-      --
-      -- -- disable conceal in markdown/quarto
-      -- vim.g['pandoc#syntax#conceal#use'] = false
-      --
-      -- -- embeds are already handled by treesitter injectons
-      -- vim.g['pandoc#syntax#codeblocks#embeds#use'] = false
-      -- vim.g['pandoc#syntax#conceal#blacklist'] = { 'codeblock_delim', 'codeblock_start' }
-      --
-      -- -- but allow some types of conceal in math regions:
-      -- -- see `:h g:tex_conceal`
-      -- vim.g['tex_conceal'] = 'gm'
-      -- --   end
-      -- },
+        end
+    },
+

+    {
+        'nvim-treesitter/nvim-treesitter',
+        tag = nil,
+        branch = 'master',
+        run = ':TSUpdate',
+        config = function()
+            require 'nvim-treesitter.configs'.setup {
+                ensure_installed = {
+                    'r', 'python', 'markdown', 'markdown_inline', 'cpp',
+                    'julia',' yaml', 'lua', 'latex', 'html', 'css',
+                    'vim', 'vimdoc', 'c',
+
+                },
+                highlight = {
+                    enable = true,
+                    additional_vim_regex_highlighting = true,
+                    -- optional (with quarto-vim extension and pandoc-syntax)
+                    -- additional_vim_regex_highlighting = { 'markdown' },
+
+                    -- note: the vim regex based highlighting from
+                    -- quarto-vim / vim-pandoc sets the wrong comment character
+                    -- for some sections where there is `$` math.
+
+                },
+                indent = {
+                    enable = true,
+                },
+                incremental_selection = {
+                    enable = true,
+                    keymaps = {
+                        init_selection = "gnn",
+                        node_incremental = "grn",
+                        scope_incremental = "grc",
+                        node_decremental = "grm",
+                    },
+                },
+                textobjects = {
+                    select = {
+                        enable = true,
+                        lookahead = true,
+                        keymaps = {
+                            -- You can use the capture groups defined in textobjects.scm
+                            ['af'] = '@function.outer',
+                            ['if'] = '@function.inner',
+                            ['ac'] = '@class.outer',
+                            ['ic'] = '@class.inner',
+                            ['ao'] = '@codechunk.outer',
+                            ['io'] = '@codechunk.inner',
+                        },
+                    },
+                    move = {
+                        enable = true,
+                        set_jumps = true, -- whether to set jumps in the jumplist
+                        goto_next_start = {
+                            [']m'] = '@function.outer',
+                            [']c'] = '@codechunk.inner',
+                            [']]'] = '@class.outer',
+                        },
+                        goto_next_end = {
+                            [']M'] = '@function.outer',
+                            [']['] = '@class.outer',
+                        },
+                        goto_previous_start = {
+                            ['[m'] = '@function.outer',
+                            ['[c'] = '@codechunk.inner',
+                            ['[['] = '@class.outer',
+                        },
+                        goto_previous_end = {
+                            ['[M'] = '@function.outer',
+                            ['[]'] = '@class.outer',
+                        },
+                    },
+                },
+            }
+        end
     },
-    config = function()
-      require 'quarto'.setup {
-        debug = false,
-        closePreviewOnExit = true,
-        lspFeatures = {
-          enabled = true,
-          languages = { 'r', 'python', 'julia', 'bash', 'lua' },
-          chunks = 'curly', -- 'curly' or 'all'
-          diagnostics = {
-            enabled = true,
-            triggers = { "BufWritePost" }
-          },
-          completion = {
-            enabled = true,
-          },
-        },
-        keymap = {
-          hover = 'K',
-          definition = 'gd'
+    { 'nvim-treesitter/nvim-treesitter-textobjects' },
+
+    -- nvimdap
+    {
+        "jay-babu/mason-nvim-dap.nvim",
+        dependencies = {
+            "williamboman/mason.nvim",
+            "mfussenegger/nvim-dap",
         },
-      }
-    end
-  },
-
-
-  {
-    'nvim-treesitter/nvim-treesitter',
-    tag = nil,
-    branch = 'master',
-    run = ':TSUpdate',
-    config = function()
-      require 'nvim-treesitter.configs'.setup {
-        ensure_installed = {
-          'r', 'python', 'markdown', 'markdown_inline',
-          'julia', 'bash', 'yaml', 'lua', 'vim',
-          'query', 'vimdoc', 'latex', 'html', 'css'
+        opts = {
+            handlers = {},
+            ensure_installed = {
+                "codelldb"
+            }
+        }
+    },
+
+    {
+        'neovim/nvim-lspconfig',
+        tag = nil,
+        version = nil,
+        branch = 'master',
+        event = "BufReadPre",
+        dependencies = {
+            { "williamboman/mason-lspconfig.nvim" },
+            { "williamboman/mason.nvim" },
+            { "hrsh7th/cmp-nvim-lsp" },
         },
-        highlight = {
-          enable = true,
-          additional_vim_regex_highlighting = true,
-          -- optional (with quarto-vim extension and pandoc-syntax)
-          -- additional_vim_regex_highlighting = { 'markdown' },
+        config = function()
+            require('mason').setup()
+            require('mason-lspconfig').setup {
+                automatic_installation = true,
+            }

-          -- note: the vim regex based highlighting from
-          -- quarto-vim / vim-pandoc sets the wrong comment character
-          -- for some sections where there is `$` math.
+            local lspconfig = require('lspconfig')
+            local cmp_nvim_lsp = require('cmp_nvim_lsp')
+            local util = require("lspconfig.util")

-        },
-        indent = {
-          enable = true,
-        },
-        incremental_selection = {
-          enable = true,
-          keymaps = {
-            init_selection = "gnn",
-            node_incremental = "grn",
-            scope_incremental = "grc",
-            node_decremental = "grm",
-          },
-        },
-        textobjects = {
-          select = {
-            enable = true,
-            lookahead = true,
-            keymaps = {
-              -- You can use the capture groups defined in textobjects.scm
-              ['af'] = '@function.outer',
-              ['if'] = '@function.inner',
-              ['ac'] = '@class.outer',
-              ['ic'] = '@class.inner',
-              ['ao'] = '@codechunk.outer',
-              ['io'] = '@codechunk.inner',
-            },
-          },
-          move = {
-            enable = true,
-            set_jumps = true, -- whether to set jumps in the jumplist
-            goto_next_start = {
-              [']m'] = '@function.outer',
-              [']c'] = '@codechunk.inner',
-              [']]'] = '@class.outer',
-            },
-            goto_next_end = {
-              [']M'] = '@function.outer',
-              [']['] = '@class.outer',
-            },
-            goto_previous_start = {
-              ['[m'] = '@function.outer',
-              ['[c'] = '@codechunk.inner',
-              ['[['] = '@class.outer',
-            },
-            goto_previous_end = {
-              ['[M'] = '@function.outer',
-              ['[]'] = '@class.outer',
-            },
-          },
-        },
-      }
-    end
-  },
-  { 'nvim-treesitter/nvim-treesitter-textobjects' },
-  {
-    'neovim/nvim-lspconfig',
-    tag = nil,
-    version = nil,
-    branch = 'master',
-    event = "BufReadPre",
-    dependencies = {
-      { "williamboman/mason-lspconfig.nvim" },
-      { "williamboman/mason.nvim" },
-      { "hrsh7th/cmp-nvim-lsp" },
-    },
-    config = function()
-      require('mason').setup()
-      require('mason-lspconfig').setup {
-        automatic_installation = true,
-      }
-
-      local lspconfig = require('lspconfig')
-      local cmp_nvim_lsp = require('cmp_nvim_lsp')
-      local util = require("lspconfig.util")
-
-      local on_attach = function(client, bufnr)
-        local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
-
-        local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
-
-        buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
-        local opts = { noremap = true, silent = true }
-
-        buf_set_keymap('n', 'gD', '<cmd>Telescope lsp_type_definitions<CR>', opts)
-        buf_set_keymap('n', 'gd', '<cmd>Telescope lsp_definitions<CR>', opts)
-        buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
-        buf_set_keymap('n', 'gh', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
-        buf_set_keymap('n', 'gi', '<cmd>Telescope lsp_implementations<CR>', opts)
-        buf_set_keymap('n', 'gr', '<cmd>Telescope lsp_references<CR>', opts)
-        buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
-        buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
-        buf_set_keymap('n', '<leader>ll', '<cmd>lua vim.lsp.codelens.run()<cr>', opts)
-        client.server_capabilities.document_formatting = true
-      end
+            local on_attach = function(client, bufnr)
+                local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
+
+                local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

+                buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
+                local opts = { noremap = true, silent = true }

-      local on_attach2 = function(client, bufnr)
-        local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
+                buf_set_keymap('n', 'gD', '<cmd>Telescope lsp_type_definitions<CR>', opts)
+                buf_set_keymap('n', 'gd', '<cmd>Telescope lsp_definitions<CR>', opts)
+                buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
+                buf_set_keymap('n', 'gh', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
+                buf_set_keymap('n', 'gi', '<cmd>Telescope lsp_implementations<CR>', opts)
+                buf_set_keymap('n', 'gr', '<cmd>Telescope lsp_references<CR>', opts)
+                buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
+                buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
+                buf_set_keymap('n', '<leader>ll', '<cmd>lua vim.lsp.codelens.run()<cr>', opts)
+                client.server_capabilities.document_formatting = true
+            end

-        local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

-        buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
-        local opts = { noremap = true, silent = true }
+            local on_attach2 = function(client, bufnr)
+                local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end

-        buf_set_keymap('n', 'gD', '<cmd>Telescope lsp_type_definitions<CR>', opts)
-        buf_set_keymap('n', 'gh', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
-        buf_set_keymap('n', 'gi', '<cmd>Telescope lsp_implementations<CR>', opts)
-        buf_set_keymap('n', 'gr', '<cmd>Telescope lsp_references<CR>', opts)
-        buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
-        buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
-        buf_set_keymap('n', '<leader>ll', '<cmd>lua vim.lsp.codelens.run()<cr>', opts)
-        client.server_capabilities.document_formatting = true
-      end
+                local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
+
+                buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')
+                local opts = { noremap = true, silent = true }

-      local lsp_flags = {
-        allow_incremental_sync = true,
-        debounce_text_changes = 150,
-      }
-
-      vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
-        virtual_text = true,
-        signs = true,
-        underline = true,
-        update_in_insert = false,
-      })
-      vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover,
-        { border = require 'misc.style'.border })
-      vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(vim.lsp.handlers.signature_help,
-        { border = require 'misc.style'.border })
-
-      local capabilities = vim.lsp.protocol.make_client_capabilities()
-      capabilities = cmp_nvim_lsp.default_capabilities(capabilities)
-      capabilities.textDocument.completion.completionItem.snippetSupport = true
-
-      -- create this file, see: https://github.com/artempyanykh/marksman/blob/main/docs/configuration.md
-      -- install marksman (it's a serparate thing, not just a plugin)
-      -- also needs:
-      -- $home/.config/marksman/config.toml :
-      -- [core]
-      -- markdown.file_extensions = ["md", "markdown", "qmd"]
-
-
---      lspconfig.marksman.setup {
---        on_attach = on_attach2,
---        capabilities = capabilities,
---        filetypes = { 'markdown', 'quarto' },
---        root_dir = util.root_pattern(".git", ".marksman.toml", "_quarto.yml"),
---      }
-
-      -- another optional language server for grammar and spelling
-      -- <https://github.com/valentjn/ltex-ls>
-      lspconfig.ltex.setup {
-          autostart = false,
-          on_attach = on_attach2,
-          capabilities = capabilities,
-          filetypes = { "markdown", "tex", "quarto", "text"},
-          settings = {
-            ltex = {
-              -- this disables spelling but keeps grammar
-              disabledRules = {
-                ["en"]    = { "MORFOLOGIK_RULE_EN"    },
-                ["en-AU"] = { "MORFOLOGIK_RULE_EN_AU" },
-                ["en-CA"] = { "MORFOLOGIK_RULE_EN_CA" },
-                ["en-GB"] = { "MORFOLOGIK_RULE_EN_GB" },
-                ["en-NZ"] = { "MORFOLOGIK_RULE_EN_NZ" },
-                ["en-US"] = { "MORFOLOGIK_RULE_EN_US" },
-                ["en-ZA"] = { "MORFOLOGIK_RULE_EN_ZA" },
-                ["es"]    = { "MORFOLOGIK_RULE_ES"    },
-                ["it"]    = { "MORFOLOGIK_RULE_IT_IT" },
-                ["de"]    = { "MORFOLOGIK_RULE_DE_DE" },
-              },
+                buf_set_keymap('n', 'gD', '<cmd>Telescope lsp_type_definitions<CR>', opts)
+                buf_set_keymap('n', 'gh', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
+                buf_set_keymap('n', 'gi', '<cmd>Telescope lsp_implementations<CR>', opts)
+                buf_set_keymap('n', 'gr', '<cmd>Telescope lsp_references<CR>', opts)
+                buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
+                buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
+                buf_set_keymap('n', '<leader>ll', '<cmd>lua vim.lsp.codelens.run()<cr>', opts)
+                client.server_capabilities.document_formatting = true
+            end
+
+            local lsp_flags = {
+                allow_incremental_sync = true,
+                debounce_text_changes = 150,
             }
-          }
-      }
-
-      lspconfig.r_language_server.setup {
-        on_attach = on_attach,
-        capabilities = capabilities,
-        flags = lsp_flags,
-      }
-
-      lspconfig.emmet_ls.setup {
-        on_attach = on_attach,
-        capabilities = capabilities,
-        flags = lsp_flags
-      }
-
-      lspconfig.cssls.setup {
-        on_attach = on_attach,
-        capabilities = capabilities,
-        flags = lsp_flags
-      }
-
-
-      local function strsplit(s, delimiter)
-        local result = {}
-        for match in (s .. delimiter):gmatch("(.-)" .. delimiter) do
-          table.insert(result, match)
-        end
-        return result
-      end

-      local function get_quarto_resource_path()
-        local f = assert(io.popen('quarto --paths', 'r'))
-        local s = assert(f:read('*a'))
-        f:close()
-        return strsplit(s, '\n')[2]
-      end
+            vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, {
+                virtual_text = true,
+                signs = true,
+                underline = true,
+                update_in_insert = false,
+            })
+            vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover,
+                { border = require 'misc.style'.border })
+            vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(vim.lsp.handlers.signature_help,
+                { border = require 'misc.style'.border })
+
+            local capabilities = vim.lsp.protocol.make_client_capabilities()
+            capabilities = cmp_nvim_lsp.default_capabilities(capabilities)
+            capabilities.textDocument.completion.completionItem.snippetSupport = true
+
+            -- create this file, see: https://github.com/artempyanykh/marksman/blob/main/docs/configuration.md
+            -- install marksman (it's a serparate thing, not just a plugin)
+            -- also needs:
+            -- $home/.config/marksman/config.toml :
+            -- [core]
+            -- markdown.file_extensions = ["md", "markdown", "qmd"]
+
+
+            --      lspconfig.marksman.setup {
+            --        on_attach = on_attach2,
+            --        capabilities = capabilities,
+            --        filetypes = { 'markdown', 'quarto' },
+            --        root_dir = util.root_pattern(".git", ".marksman.toml", "_quarto.yml"),
+            --      }
+
+            -- another optional language server for grammar and spelling
+            -- <https://github.com/valentjn/ltex-ls>
+            lspconfig.ltex.setup {
+                autostart = false,
+                on_attach = on_attach2,
+                capabilities = capabilities,
+                filetypes = { "markdown", "tex", "quarto", "text"},
+                settings = {
+                    ltex = {
+                        -- this disables spelling but keeps grammar
+                        disabledRules = {
+                            ["en"]    = { "MORFOLOGIK_RULE_EN"    },
+                            ["en-AU"] = { "MORFOLOGIK_RULE_EN_AU" },
+                            ["en-CA"] = { "MORFOLOGIK_RULE_EN_CA" },
+                            ["en-GB"] = { "MORFOLOGIK_RULE_EN_GB" },
+                            ["en-NZ"] = { "MORFOLOGIK_RULE_EN_NZ" },
+                            ["en-US"] = { "MORFOLOGIK_RULE_EN_US" },
+                            ["en-ZA"] = { "MORFOLOGIK_RULE_EN_ZA" },
+                            ["es"]    = { "MORFOLOGIK_RULE_ES"    },
+                            ["it"]    = { "MORFOLOGIK_RULE_IT_IT" },
+                            ["de"]    = { "MORFOLOGIK_RULE_DE_DE" },
+                        },
+                    }
+                }
+            }

-      ---- These cause an error on startup but don't I'm not sure what it does and
-      ---- changing it messes with a few things
-
-      local lua_library_files = vim.api.nvim_get_runtime_file("", true)
-      local resource_path = get_quarto_resource_path()
-      -- table.insert(lua_library_files, resource_path .. '/lua-types')
-      table.insert(lua_library_files, '/opt/quarto/bin' .. '/lua-types')
-      table.insert(lua_library_files, '/opt/quarto/share' .. '/lua-types')
-
-      local lua_plugin_paths = {}
-      table.insert(lua_plugin_paths, 'opt/quarto/bin' .. '/lua-plugin/plugin.lua')
-      table.insert(lua_plugin_paths, 'opt/quarto/share' .. '/lua-plugin/plugin.lua')
-
-      -- not upadated yet in automatic mason-lspconfig install,
-      -- open mason manually with `<space>vm` and `/` search for lua.
-      lspconfig.lua_ls.setup {
-        on_attach = on_attach,
-        capabilities = capabilities,
-        flags = lsp_flags,
-        settings = {
-          Lua = {
-            completion = {
-              callSnippet = "Replace"
-            },
-            runtime = {
-              version = 'LuaJIT',
-              plugin = lua_plugin_paths,
-            },
-            diagnostics = {
-              globals = { 'vim', 'quarto', 'pandoc', 'io', 'string', 'print', 'require', 'table', },
-              disable = { 'trailing-space' },
-            },
-            workspace = {
-              library = lua_library_files,
-              checkThirdParty = false,
-            },
-            telemetry = {
-              enable = false,
-            },
-          },
-        },
-      }
-
-      lspconfig.pyright.setup {
-        on_attach = on_attach,
-        capabilities = capabilities,
-        flags = lsp_flags,
-        settings = {
-          python = {
-            analysis = {
-              -- changing to true doesn't fix conda
-              autoSearchPaths = true,
-              useLibraryCodeForTypes = true,
-              diagnosticMode = 'openFilesOnly',
-            },
-            -- why doesn't this work?
-            -- pythonPath = '/home/thadryan/anaconda3/envs/binf1/bin/python',
-          },
-        },
-        root_dir = function(fname)
-          return util.root_pattern(".git", "setup.py", "setup.cfg", "pyproject.toml", "requirements.txt")(fname) or
-              util.path.dirname(fname)
-        end
-      }
-
-      lspconfig.julials.setup {
-        on_attach = on_attach,
-        capabilities = capabilities,
-        flags = lsp_flags,
-        filetypes = { 'jl', 'qmd' }
-      }
-
-      lspconfig.bashls.setup {
-        on_attach = on_attach,
-        capabilities = capabilities,
-        flags = lsp_flags,
-        filetypes = { 'sh', 'bash' }
-      }
-
-      -- Add additional languages here.
-      -- See `:h lspconfig-all` for the configuration.
-      -- Like e.g. Haskell:
-      -- lspconfig.hls.setup {
-      --   on_attach = on_attach,
-      --   capabilities = capabilities,
-      --   flags = lsp_flags
-      -- }
-    end
-  },
-
-  -- completion
-  {
-    'hrsh7th/nvim-cmp',
-    dependencies = {
-      { 'hrsh7th/cmp-nvim-lsp' },
-      { 'hrsh7th/cmp-nvim-lsp-signature-help' },
-      { 'hrsh7th/cmp-buffer' },
-      { 'hrsh7th/cmp-path' },
-      { 'hrsh7th/cmp-calc' },
-      { 'hrsh7th/cmp-emoji' },
-      { 'saadparwaiz1/cmp_luasnip' },
-      { 'f3fora/cmp-spell' },
-      { 'ray-x/cmp-treesitter' },
-      { 'kdheepak/cmp-latex-symbols' },
-      { 'jmbuhr/cmp-pandoc-references' },
-      { 'L3MON4D3/LuaSnip' },
-      { 'rafamadriz/friendly-snippets' },
-      { 'onsails/lspkind-nvim' },
-
-      -- optional
-      -- more things to try:
-      -- {
-      --   "zbirenbaum/copilot-cmp",
-      --   after = { "copilot.lua" },
-      --   dependencies = { "zbirenbaum/copilot.lua" },
-      --   config = function()
-      --     require("copilot").setup({
-      --       suggestion = { enabled = false },
-      --       panel = { enabled = false },
-      --     })
-      --     require("copilot_cmp").setup()
-      --   end
-      -- },
+            lspconfig.r_language_server.setup {
+                on_attach = on_attach,
+                capabilities = capabilities,
+                flags = lsp_flags,
+            }

+            lspconfig.emmet_ls.setup {
+                on_attach = on_attach,
+                capabilities = capabilities,
+                flags = lsp_flags
+            }
+
+            lspconfig.cssls.setup {
+                on_attach = on_attach,
+                capabilities = capabilities,
+                flags = lsp_flags
+            }
+
+            lspconfig.clangd.setup{
+                on_attach = on_attach,
+                capabilities = capabilities,
+                flags = lsp_flags
+            }
+
+
+            local function strsplit(s, delimiter)
+                local result = {}
+                for match in (s .. delimiter):gmatch("(.-)" .. delimiter) do
+                    table.insert(result, match)
+                end
+                return result
+            end
+
+            local function get_quarto_resource_path()
+                local f = assert(io.popen('quarto --paths', 'r'))
+                local s = assert(f:read('*a'))
+                f:close()
+                return strsplit(s, '\n')[2]
+            end
+
+            ---- These cause an error on startup but don't I'm not sure what it does and
+            ---- changing it messes with a few things
+
+            local lua_library_files = vim.api.nvim_get_runtime_file("", true)
+            local resource_path = get_quarto_resource_path()
+            -- table.insert(lua_library_files, resource_path .. '/lua-types')
+            table.insert(lua_library_files, '/opt/quarto/bin' .. '/lua-types')
+            table.insert(lua_library_files, '/opt/quarto/share' .. '/lua-types')
+
+            local lua_plugin_paths = {}
+            table.insert(lua_plugin_paths, 'opt/quarto/bin' .. '/lua-plugin/plugin.lua')
+            table.insert(lua_plugin_paths, 'opt/quarto/share' .. '/lua-plugin/plugin.lua')
+
+            -- not upadated yet in automatic mason-lspconfig install,
+            -- open mason manually with `<space>vm` and `/` search for lua.
+            lspconfig.lua_ls.setup {
+                autostart = false,
+                on_attach = on_attach,
+                capabilities = capabilities,
+                flags = lsp_flags,
+                settings = {
+                    Lua = {
+                        completion = {
+                            callSnippet = "Replace"
+                        },
+                        runtime = {
+                            version = 'LuaJIT',
+                            plugin = lua_plugin_paths,
+                        },
+                        diagnostics = {
+                            globals = { 'vim', 'quarto', 'pandoc', 'io', 'string', 'print', 'require', 'table', },
+                            disable = { 'trailing-space' },
+                        },
+                        workspace = {
+                            library = lua_library_files,
+                            checkThirdParty = false,
+                        },
+                        telemetry = {
+                            enable = false,
+                        },
+                    },
+                },
+            }
+
+            lspconfig.pyright.setup {
+                on_attach = on_attach,
+                capabilities = capabilities,
+                flags = lsp_flags,
+                settings = {
+                    python = {
+                        analysis = {
+                            -- changing to true doesn't fix conda
+                            autoSearchPaths = true,
+                            useLibraryCodeForTypes = true,
+                            diagnosticMode = 'openFilesOnly',
+                        },
+                        -- why doesn't this work?
+                        -- pythonPath = '/home/thadryan/anaconda3/envs/binf1/bin/python',
+                    },
+                },
+                root_dir = function(fname)
+                    return util.root_pattern(".git", "setup.py", "setup.cfg", "pyproject.toml", "requirements.txt")(fname) or
+                        util.path.dirname(fname)
+                end
+            }
+
+            lspconfig.julials.setup {
+                on_attach = on_attach,
+                capabilities = capabilities,
+                flags = lsp_flags,
+                filetypes = { 'jl', 'qmd' }
+            }
+
+            lspconfig.bashls.setup {
+                on_attach = on_attach,
+                capabilities = capabilities,
+                flags = lsp_flags,
+                filetypes = { 'sh', 'bash' }
+            }
+
+            -- Add additional languages here.
+            -- See `:h lspconfig-all` for the configuration.
+            -- Like e.g. Haskell:
+            -- lspconfig.hls.setup {
+            --   on_attach = on_attach,
+            --   capabilities = capabilities,
+            --   flags = lsp_flags
+            -- }
+        end
     },
-    config = function()
-      local cmp = require 'cmp'
-      local luasnip = require 'luasnip'
-      local lspkind = require "lspkind"
-      lspkind.init()


-      local has_words_before = function()
-        local line, col = unpack(vim.api.nvim_win_get_cursor(0))
-        return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
-      end
+    -- completion
+    {
+        'hrsh7th/nvim-cmp',
+        dependencies = {
+            { 'hrsh7th/cmp-nvim-lsp' },
+            { 'hrsh7th/cmp-nvim-lsp-signature-help' },
+            { 'hrsh7th/cmp-buffer' },
+            { 'hrsh7th/cmp-path' },
+            { 'hrsh7th/cmp-calc' },
+            { 'hrsh7th/cmp-emoji' },
+            { 'saadparwaiz1/cmp_luasnip' },
+            { 'f3fora/cmp-spell' },
+            { 'ray-x/cmp-treesitter' },
+            { 'kdheepak/cmp-latex-symbols' },
+            { 'jmbuhr/cmp-pandoc-references' },
+            { 'L3MON4D3/LuaSnip' },
+            { 'rafamadriz/friendly-snippets' },
+            { 'onsails/lspkind-nvim' },
+
+            -- optional
+            -- more things to try:
+            -- {
+            --   "zbirenbaum/copilot-cmp",
+            --   after = { "copilot.lua" },
+            --   dependencies = { "zbirenbaum/copilot.lua" },
+            --   config = function()
+            --     require("copilot").setup({
+            --       suggestion = { enabled = false },
+            --       panel = { enabled = false },
+            --     })
+            --     require("copilot_cmp").setup()
+            --   end
+            -- },

-      cmp.setup({
-        snippet = {
-          expand = function(args)
-            luasnip.lsp_expand(args.body)
-          end,
         },
-        mapping = {
-          ['<C-f>'] = cmp.mapping.scroll_docs(-4),
-          ['<C-d>'] = cmp.mapping.scroll_docs(4),
-          ['<C-n>'] = cmp.mapping(function(fallback)
-            if luasnip.expand_or_jumpable() then
-              luasnip.expand_or_jump()
-              fallback()
-            end
-          end, { "i", "s" }),
-          ['<C-p>'] = cmp.mapping(function(fallback)
-            if luasnip.jumpable(-1) then
-              luasnip.jump(-1)
-            else
-              fallback()
+        config = function()
+            local cmp = require 'cmp'
+            local luasnip = require 'luasnip'
+            local lspkind = require "lspkind"
+            lspkind.init()
+
+
+            local has_words_before = function()
+                local line, col = unpack(vim.api.nvim_win_get_cursor(0))
+                return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
             end
-          end, { "i", "s" }),
-          ['<c-a>'] = cmp.mapping.complete(),
-          ['<C-e>'] = cmp.mapping.abort(),
-          ['<CR>'] = cmp.mapping.confirm({
-            select = true,
-          }),
-        -- https://www.reddit.com/r/neovim/comments/sk70rk/using_github_copilot_in_neovim_tab_map_has_been/
-        -- ['<Tab>'] = cmp.mapping(function(fallback)
-        --     local copilot_keys = vim.fn['copilot#Accept']()
-        --     if cmp.visible() then
-        --         cmp.select_next_item()
-        --     elseif luasnip.expand_or_jumpable() then
-        --         luasnip.expand_or_jump()
-        --     elseif copilot_keys ~= '' and type(copilot_keys) == 'string' then
-        --         vim.api.nvim_feedkeys(copilot_keys, 'i', true)
-        --     else
-        --         fallback()
-        -- end
-        --     end, {
-        --     'i',
-        --     's',
-        -- }),
-        -- this is before I added copilot
-       ["<Tab>"] = cmp.mapping(function(fallback)
-         if cmp.visible() then
-           cmp.select_next_item()
-         elseif has_words_before() then
-           cmp.complete()
-         else
-           fallback()
-         end
-       end, { "i", "s" }),
-
-       -- this is my attempt at hybridizing them
-      -- ["<Tab>"] = cmp.mapping(function(fallback)
-      --     local copilot_keys = vim.fn['copilot#Accept']()
-      --         if cmp.visible() then
-      --             cmp.select_next_item()
-      --         elseif has_words_before() then
-      --             cmp.complete()
-      --         elseif copilot_keys ~= '' and type(copilot_keys) == 'string' then
-      --             vim.api.nvim_feedkeys(copilot_keys, 'i', true)
-      --         else
-      --             fallback()
-      --         end
-      --     end, { "i", "s" }),
-
-          ["<S-Tab>"] = cmp.mapping(function(fallback)
-            if cmp.visible() then
-              cmp.select_prev_item()
-            else
-              fallback()
+
+            cmp.setup({
+                snippet = {
+                    expand = function(args)
+                        luasnip.lsp_expand(args.body)
+                    end,
+                },
+                mapping = {
+                    ['<C-f>'] = cmp.mapping.scroll_docs(-4),
+                    ['<C-d>'] = cmp.mapping.scroll_docs(4),
+                    ['<C-n>'] = cmp.mapping(function(fallback)
+                        if luasnip.expand_or_jumpable() then
+                            luasnip.expand_or_jump()
+                            fallback()
+                        end
+                    end, { "i", "s" }),
+                    ['<C-p>'] = cmp.mapping(function(fallback)
+                        if luasnip.jumpable(-1) then
+                            luasnip.jump(-1)
+                        else
+                            fallback()
+                        end
+                    end, { "i", "s" }),
+                    ['<c-a>'] = cmp.mapping.complete(),
+                    ['<C-e>'] = cmp.mapping.abort(),
+                    ['<CR>'] = cmp.mapping.confirm({
+                        select = true,
+                    }),
+                    -- https://www.reddit.com/r/neovim/comments/sk70rk/using_github_copilot_in_neovim_tab_map_has_been/
+                    -- ['<Tab>'] = cmp.mapping(function(fallback)
+                    --     local copilot_keys = vim.fn['copilot#Accept']()
+                    --     if cmp.visible() then
+                    --         cmp.select_next_item()
+                    --     elseif luasnip.expand_or_jumpable() then
+                    --         luasnip.expand_or_jump()
+                    --     elseif copilot_keys ~= '' and type(copilot_keys) == 'string' then
+                    --         vim.api.nvim_feedkeys(copilot_keys, 'i', true)
+                    --     else
+                    --         fallback()
+                    -- end
+                    --     end, {
+                    --     'i',
+                    --     's',
+                    -- }),
+                    -- this is before I added copilot
+                    ["<Tab>"] = cmp.mapping(function(fallback)
+                        if cmp.visible() then
+                            cmp.select_next_item()
+                        elseif has_words_before() then
+                            cmp.complete()
+                        else
+                            fallback()
+                        end
+                    end, { "i", "s" }),
+
+                    -- this is my attempt at hybridizing them
+                    -- ["<Tab>"] = cmp.mapping(function(fallback)
+                    --     local copilot_keys = vim.fn['copilot#Accept']()
+                    --         if cmp.visible() then
+                    --             cmp.select_next_item()
+                    --         elseif has_words_before() then
+                    --             cmp.complete()
+                    --         elseif copilot_keys ~= '' and type(copilot_keys) == 'string' then
+                    --             vim.api.nvim_feedkeys(copilot_keys, 'i', true)
+                    --         else
+                    --             fallback()
+                    --         end
+                    --     end, { "i", "s" }),
+
+                    ["<S-Tab>"] = cmp.mapping(function(fallback)
+                        if cmp.visible() then
+                            cmp.select_prev_item()
+                        else
+                            fallback()
+                        end
+                    end, { "i", "s" }),
+                },
+                autocomplete = false,
+                formatting = {
+                    format = lspkind.cmp_format {
+                        with_text = true,
+                        menu = {
+                            otter = "[🦦]",
+                            copilot = '[]',
+                            luasnip = "[snip]",
+                            nvim_lsp = "[LSP]",
+                            buffer = "[buf]",
+                            path = "[path]",
+                            spell = "[spell]",
+                            pandoc_references = "[ref]",
+                            tags = "[tag]",
+                            treesitter = "[TS]",
+                            calc = "[calc]",
+                            latex_symbols = "[tex]",
+                            emoji = "[emoji]",
+                        },
+                    },
+                },
+                sources = {
+                    -- { name = 'copilot',                keyword_length = 0, max_item_count = 3 },
+                    { name = 'otter' }, -- for code chunks in quarto
+                    { name = 'path' },
+                    { name = 'nvim_lsp' },
+                    { name = 'nvim_lsp_signature_help' },
+                    { name = 'luasnip',                keyword_length = 3, max_item_count = 3 },
+                    { name = 'pandoc_references' },
+                    { name = 'buffer',                 keyword_length = 5, max_item_count = 3 },
+                    { name = 'spell' },
+                    { name = 'treesitter',             keyword_length = 5, max_item_count = 3 },
+                    { name = 'calc' },
+                    { name = 'latex_symbols' },
+                    { name = 'emoji' },
+                },
+                view = {
+                    entries = "native",
+                },
+                window = {
+                    documentation = {
+                        border = require 'misc.style'.border,
+                    },
+                },
+            })
+            -- for friendly snippets
+            require("luasnip.loaders.from_vscode").lazy_load()
+            -- for custom snippets
+            require("luasnip.loaders.from_vscode").lazy_load({ paths = { "~/.config/nvim/snips" } })
+        end
+    },
+
+
+    -- send code from python/r/qmd documets to a terminal or REPL
+    -- like ipython, R, bash
+    {
+        'jpalardy/vim-slime',
+        init = function()
+            Quarto_is_in_python_chunk = function()
+                require 'otter.tools.functions'.is_otter_language_context('python')
             end
-          end, { "i", "s" }),
-        },
-        autocomplete = false,
-        formatting = {
-          format = lspkind.cmp_format {
-            with_text = true,
-            menu = {
-              otter = "[🦦]",
-              copilot = '[]',
-              luasnip = "[snip]",
-              nvim_lsp = "[LSP]",
-              buffer = "[buf]",
-              path = "[path]",
-              spell = "[spell]",
-              pandoc_references = "[ref]",
-              tags = "[tag]",
-              treesitter = "[TS]",
-              calc = "[calc]",
-              latex_symbols = "[tex]",
-              emoji = "[emoji]",
-            },
-          },
-        },
-        sources = {
-          -- { name = 'copilot',                keyword_length = 0, max_item_count = 3 },
-          { name = 'otter' }, -- for code chunks in quarto
-          { name = 'path' },
-          { name = 'nvim_lsp' },
-          { name = 'nvim_lsp_signature_help' },
-          { name = 'luasnip',                keyword_length = 3, max_item_count = 3 },
-          { name = 'pandoc_references' },
-          { name = 'buffer',                 keyword_length = 5, max_item_count = 3 },
-          { name = 'spell' },
-          { name = 'treesitter',             keyword_length = 5, max_item_count = 3 },
-          { name = 'calc' },
-          { name = 'latex_symbols' },
-          { name = 'emoji' },
-        },
-        view = {
-          entries = "native",
-        },
-        window = {
-          documentation = {
-            border = require 'misc.style'.border,
-          },
-        },
-      })
-      -- for friendly snippets
-      require("luasnip.loaders.from_vscode").lazy_load()
-      -- for custom snippets
-      require("luasnip.loaders.from_vscode").lazy_load({ paths = { "~/.config/nvim/snips" } })
-    end
-  },
-
-
-  -- send code from python/r/qmd documets to a terminal or REPL
-  -- like ipython, R, bash
-  {
-    'jpalardy/vim-slime',
-    init = function()
-      Quarto_is_in_python_chunk = function()
-        require 'otter.tools.functions'.is_otter_language_context('python')
-      end

-      vim.cmd [[
+            vim.cmd [[
       function SlimeOverride_EscapeText_quarto(text)
       call v:lua.Quarto_is_in_python_chunk()
       if exists('g:slime_python_ipython') && len(split(a:text,"\n")) > 1 && b:quarto_is_python_chunk
@@ -589,60 +585,60 @@ return {
       endfunction
       ]]

-      local function mark_terminal()
-        vim.g.slime_last_channel = vim.b.terminal_job_id
-        vim.print(vim.g.slime_last_channel)
-      end
+            local function mark_terminal()
+                vim.g.slime_last_channel = vim.b.terminal_job_id
+                vim.print(vim.g.slime_last_channel)
+            end

-      local function set_terminal()
-        vim.b.slime_config = { jobid = vim.g.slime_last_channel }
-      end
+            local function set_terminal()
+                vim.b.slime_config = { jobid = vim.g.slime_last_channel }
+            end
+
+            vim.b.slime_cell_delimiter = "#%%"
+
+            -- slime, neovvim terminal
+            vim.g.slime_target = "neovim"
+            -- vim.g.slime_python_ipython = 1
+
+            -- slime, tmux
+            vim.g.slime_target = 'tmux'
+            vim.g.slime_bracketed_paste = 1
+            vim.g.slime_default_config = { socket_name = "default", target_pane = ".2" }
+
+            local function toggle_slime_tmux_nvim()
+                if vim.g.slime_target == 'tmux' then
+                    pcall(function()
+                        vim.b.slime_config = nil
+                        vim.g.slime_default_config = nil
+                    end
+                    )
+                    -- slime, neovvim terminal
+                    vim.g.slime_target = "neovim"
+                    vim.g.slime_bracketed_paste = 0
+                    vim.g.slime_python_ipython = 1
+                elseif vim.g.slime_target == 'neovim' then
+                    pcall(function()
+                        vim.b.slime_config = nil
+                        vim.g.slime_default_config = nil
+                    end
+                    )
+                    -- -- slime, tmux
+                    -- vim.g.slime_target = 'tmux'
+                    -- vim.g.slime_bracketed_paste = 1
+                    -- vim.g.slime_default_config = { socket_name = "default", target_pane = ".2" }
+                end
+            end

-      vim.b.slime_cell_delimiter = "#%%"
-
-      -- slime, neovvim terminal
-      vim.g.slime_target = "neovim"
-      -- vim.g.slime_python_ipython = 1
-
-      -- slime, tmux
-      vim.g.slime_target = 'tmux'
-      vim.g.slime_bracketed_paste = 1
-      vim.g.slime_default_config = { socket_name = "default", target_pane = ".2" }
-
-      local function toggle_slime_tmux_nvim()
-        if vim.g.slime_target == 'tmux' then
-          pcall(function()
-            vim.b.slime_config = nil
-            vim.g.slime_default_config = nil
-          end
-          )
-          -- slime, neovvim terminal
-          vim.g.slime_target = "neovim"
-          vim.g.slime_bracketed_paste = 0
-          vim.g.slime_python_ipython = 1
-        elseif vim.g.slime_target == 'neovim' then
-          pcall(function()
-            vim.b.slime_config = nil
-            vim.g.slime_default_config = nil
-          end
-          )
-          -- -- slime, tmux
-          -- vim.g.slime_target = 'tmux'
-          -- vim.g.slime_bracketed_paste = 1
-          -- vim.g.slime_default_config = { socket_name = "default", target_pane = ".2" }
+            require 'which-key'.register({
+                ['<leader>cm'] = { mark_terminal, 'mark terminal' },
+                ['<leader>cs'] = { set_terminal, 'set terminal' },
+                ['<leader>ct'] = { toggle_slime_tmux_nvim, 'toggle tmux/nvim terminal' },
+            })
         end
-      end
+    },

-      require 'which-key'.register({
-        ['<leader>cm'] = { mark_terminal, 'mark terminal' },
-        ['<leader>cs'] = { set_terminal, 'set terminal' },
-        ['<leader>ct'] = { toggle_slime_tmux_nvim, 'toggle tmux/nvim terminal' },
-      })
-    end
-  },
-
-  -- paste an image to markdown from the clipboard
-  -- :PasteImg,
-  { 'ekickx/clipboard-image.nvim' },
+    -- paste an image to markdown from the clipboard
+    -- :PasteImg,
+    { 'ekickx/clipboard-image.nvim' },

 }
diff --git a/lua/plugins/test-plugin.lua b/lua/plugins/test-plugin.lua
new file mode 100644
index 0000000..8be7de2
--- /dev/null
+++ b/lua/plugins/test-plugin.lua
@@ -0,0 +1,11 @@
+return {
+    {  "thadryanjs/test-plugin",
+        enable = false,
+        dev = true,
+        dir = "/home/thadryan/Documents/Vault/Projects/ActiveProjects/Tests/test-plugin",
+        lazy = false,
+        dependencies = {
+            "natecraddock/workspaces.nvim",
+        },
+    }
+}
diff --git a/lua/plugins/todos.lua b/lua/plugins/todos.lua
deleted file mode 100644
index c3e4aa4..0000000
--- a/lua/plugins/todos.lua
+++ /dev/null
@@ -1,12 +0,0 @@
-return {
-    {"AmeerTaweel/todo.nvim", config = function()
-        require("todo").setup(
-            {
-                keywords = {
-                    TASK = { icon = " ", color = "info" }
-                }
-            }
-        )
-    end
-    }
-}
diff --git a/lua/plugins/ui.lua b/lua/plugins/ui.lua
index d9b44fd..fd7e828 100644
--- a/lua/plugins/ui.lua
+++ b/lua/plugins/ui.lua
@@ -1,231 +1,228 @@
 return {
-   -- telescope
-   -- a nice seletion UI also to find and open files
-   { 'nvim-telescope/telescope.nvim', config = function()
-     local telescope = require 'telescope'
-     local actions = require('telescope.actions')
-     local previewers = require("telescope.previewers")
-     local new_maker = function(filepath, bufnr, opts)
-       opts = opts or {}
-       filepath = vim.fn.expand(filepath)
-       vim.loop.fs_stat(filepath, function(_, stat)
-         if not stat then return end
-         if stat.size > 100000 then
-           return
-         else
-           previewers.buffer_previewer_maker(filepath, bufnr, opts)
-         end
-       end)
-     end
-     telescope.setup {
-       defaults = {
-         buffer_previewer_maker = new_maker,
-         file_ignore_patterns = { "node_modules", "%_files/*.html", "%_cache", ".git/", "site_libs", ".venv" },
-         layout_strategy = "flex",
-         sorting_strategy = "ascending",
-         layout_config = {
-           prompt_position = "top",
-         },
-         mappings = {
-           i = {
-             ['<C-u>'] = false,
-             ['<C-d>'] = false,
-             ["<esc>"] = actions.close,
-             ["<c-j>"] = actions.move_selection_next,
-             ["<c-k>"] = actions.move_selection_previous,
-           }
-         }
-       },
-       pickers = {
-         find_files = {
-           hidden = true,
-           find_command = { "rg", "--files", "--hidden", "--glob", "!.git/*",
-             '--glob', '!**/.Rproj.user/*', '-L' },
-         }
-       },
-       extensions = {
-         ["ui-select"] = {
-           require("telescope.themes").get_dropdown(),
-         },
-       }
-     }
-     telescope.load_extension('ui-select')
-     telescope.load_extension('fzf')
-     telescope.load_extension('ui-select')
-     telescope.load_extension('file_browser')
-     telescope.load_extension('dap')
-     telescope.load_extension('workspaces')
-        telescope.load_extension('harpoon')
---     telescope.load_extension('project_nvim')
-   end
-   },

-   { 'nvim-telescope/telescope-ui-select.nvim' },
-   { 'nvim-telescope/telescope-fzf-native.nvim', build = 'make' },
-   { 'nvim-telescope/telescope-dap.nvim' },
-   { 'nvim-telescope/telescope-file-browser.nvim' },
-
---   { 'nvim-telescope/telescope-project.nvim' },
-   { 'nvim-lualine/lualine.nvim',
-     dependencies = {
-       { 'f-person/git-blame.nvim' },
-     },
-     config = function()
-       local git_blame = require('gitblame')
-       vim.g.gitblame_display_virtual_text = 0
-       vim.o.shortmess = vim.o.shortmess .. "S" -- this is for the search_count function so lua can know this is `lua expression`
-       --function for optimizing the search count
-       local function search_count()
-         if vim.api.nvim_get_vvar("hlsearch") == 1 then
-           local res = vim.fn.searchcount({ maxcount = 999, timeout = 500 })
-
-           if res.total > 0 then
-             return string.format("%d/%d", res.current, res.total)
-           end
-         end
-
-         return ""
-       end
-       local function macro_reg()
-         return vim.fn.reg_recording()
-       end
-       require('lualine').setup {
-         options = {
-           section_separators = '',
-           component_separators = '',
-           globalstatus = true
-           -- theme = "rose-pine",
-         },
-         sections = {
-           lualine_a = {'mode', {macro_reg, type = 'lua_expr', color = 'WarningMsg'} },
-           lualine_b = {'branch', { search_count, type = 'lua_expr' } },
-           lualine_c = {
-             { git_blame.get_current_blame_text, cond = git_blame.is_blame_text_available }
-           },
-         },
-         extensions = { 'nvim-tree' },
-       }
-     end
-   },
-   { 'nanozuki/tabby.nvim', config = function()
-     require 'tabby.tabline'.use_preset('tab_only')
-   end
-   },
-   { 'dstein64/nvim-scrollview', config = function()
-     require('scrollview').setup({
-       current_only = true,
-     })
-   end
-   },
+    {  -- filetree (this is the one I use, the other is just a dependency for the welcome screen)
+        "nvim-neo-tree/neo-tree.nvim",
+        opts = {
+            filesystem = {
+                filtered_items = {
+                    visible = true,
+                    show_hidden_count = true,
+                    hide_dotfiles = false,
+                    hide_gitignored = true,
+                    hide_by_name = {
+                        -- '.git',
+                        -- '.DS_Store',
+                        -- 'thumbs.db',
+                    },
+                    never_show = {},
+                },
+            }
+        }
+    },

-   -- { 'RRethy/vim-illuminate' }, -- highlight current word
-   -- filetree
-    { 'nvim-tree/nvim-tree.lua',
-        --[[ keys = {
-            { '<c-b>', ':NvimTreeToggle<cr>' },
-        }, ]]
+    {   -- telescope
+        'nvim-telescope/telescope.nvim',
         config = function()
-            require 'nvim-tree'.setup {
-                disable_netrw = true,
-                update_cwd = true,
-                update_focused_file = {
-                    enable = true,
+            local telescope = require 'telescope'
+            local actions = require('telescope.actions')
+            local previewers = require("telescope.previewers")
+            local new_maker = function(filepath, bufnr, opts)
+                opts = opts or {}
+                filepath = vim.fn.expand(filepath)
+                vim.loop.fs_stat(filepath, function(_, stat)
+                    if not stat then return end
+                    if stat.size > 100000 then
+                        return
+                    else
+                        previewers.buffer_previewer_maker(filepath, bufnr, opts)
+                    end
+                end)
+            end
+            telescope.setup {
+                defaults = {
+                    buffer_previewer_maker = new_maker,
+                    file_ignore_patterns = { "node_modules", "%_files/*.html", "%_cache", ".git/", "site_libs", ".venv" },
+                    layout_strategy = "flex",
+                    sorting_strategy = "ascending",
+                    layout_config = {
+                        prompt_position = "top",
+                    },
+                    mappings = {
+                        i = {
+                            ['<C-u>'] = false,
+                            ['<C-d>'] = false,
+                            ["<esc>"] = actions.close,
+                            ["<c-j>"] = actions.move_selection_next,
+                            ["<c-k>"] = actions.move_selection_previous,
+                        }
+                    }
                 },
-                git = {
-                    enable = true,
-                    ignore = false,
-                    timeout = 500,
+                pickers = {
+                    find_files = {
+                        hidden = true,
+                        find_command = { "rg", "--files", "--hidden", "--glob", "!.git/*",
+                            '--glob', '!**/.Rproj.user/*', '-L' },
+                    }
                 },
-                diagnostics = {
-                    enable = true,
+                extensions = {
+                    ["ui-select"] = {
+                        require("telescope.themes").get_dropdown(),
+                    },
+                }
+            }
+            telescope.load_extension('ui-select')
+            telescope.load_extension('fzf')
+            telescope.load_extension('ui-select')
+            telescope.load_extension('file_browser')
+            telescope.load_extension('dap')
+            telescope.load_extension('harpoon')
+            telescope.load_extension("workspaces")
+            -- telescope.load_extension('neorg-telescope')
+        end
+    },
+    { 'nvim-telescope/telescope-ui-select.nvim' },
+    { 'nvim-telescope/telescope-fzf-native.nvim', build = 'make' },
+    { 'nvim-telescope/telescope-dap.nvim' },
+    { 'nvim-telescope/telescope-file-browser.nvim' },
+    { 'nvim-lualine/lualine.nvim',
+        dependencies = {
+            { 'f-person/git-blame.nvim' },
+        },
+        config = function()
+            local git_blame = require('gitblame')
+            vim.g.gitblame_display_virtual_text = 0
+            vim.o.shortmess = vim.o.shortmess .. "S" -- this is for the search_count function so lua can know this is `lua expression`
+            --function for optimizing the search count
+            local function search_count()
+                if vim.api.nvim_get_vvar("hlsearch") == 1 then
+                    local res = vim.fn.searchcount({ maxcount = 999, timeout = 500 })
+
+                    if res.total > 0 then
+                        return string.format("%d/%d", res.current, res.total)
+                    end
+                end
+
+                return ""
+            end
+            local function macro_reg()
+                return vim.fn.reg_recording()
+            end
+            require('lualine').setup {
+                options = {
+                    section_separators = '',
+                    component_separators = '',
+                    globalstatus = true
+                    -- theme = "rose-pine",
+                },
+                sections = {
+                    lualine_a = {'mode', {macro_reg, type = 'lua_expr', color = 'WarningMsg'} },
+                    lualine_b = {'branch', { search_count, type = 'lua_expr' } },
+                    lualine_c = {
+                        { git_blame.get_current_blame_text, cond = git_blame.is_blame_text_available }
+                    },
                 },
+                extensions = { 'nvim-tree' },
             }
         end
     },

-   -- show keybinding help window
-   { 'folke/which-key.nvim' },
-   { 'simrat39/symbols-outline.nvim', config = function()
-     require("symbols-outline").setup()
-   end },
+    { -- filetree - I guess this is a dependency for Alpha which I like so I am leaving it
+        'nvim-tree/nvim-tree.lua',
+        -- keys = {
+        --     { '<c-b>', ':NvimTreeToggle<cr>' },
+        -- },
+        -- config = function()
+        --     require 'nvim-tree'.setup {
+        --         disable_netrw = true,
+        --         update_cwd = true,
+        --         update_focused_file = {
+        --             enable = true,
+        --         },
+        --         git = {
+        --             enable = true,
+        --             ignore = false,
+        --             timeout = 500,
+        --         },
+        --         diagnostics = {
+        --             enable = true,
+        --         },
+        --     }
+        -- end
+    },
+
+    -- show keybinding help window
+    { 'folke/which-key.nvim' },
+
+    {   -- very cool
+        'simrat39/symbols-outline.nvim',
+        config = function()
+            require("symbols-outline").setup()
+        end
+    },
+
+    {    -- terminal
+        "akinsho/toggleterm.nvim", version = '*',
+        config = function()
+            require("toggleterm").setup {
+                open_mapping = [[<c-\>]],
+                direction = 'float',
+            }
+        end
+    },

-   -- terminal
-   { "akinsho/toggleterm.nvim", version = '*', config = function()
-     require("toggleterm").setup {
-       open_mapping = [[<c-\>]],
-       direction = 'float',
-     }
-   end
-   },
+    {   -- show diagnostics list
+        "folke/trouble.nvim",
+        config = function()
+            require("trouble").setup {}
+        end
+    },

-   -- show diagnostics list
-   { "folke/trouble.nvim", config = function()
-     require("trouble").setup {}
-   end
-   },
+    -- ?
     {"MunifTanjim/nui.nvim"},
-    {"VonHeikemen/fine-cmdline.nvim", config = function()
-        require('fine-cmdline').setup({
-          cmdline = {
-            enable_keymaps = true,
-            smart_history = true,
-            prompt = ': '
-          },
-          popup = {
-            position = {
-              row = '50%',
-              col = '50%',
-            },
-            size = {
-              width = '60%',
-            },
-            border = {
-              style = 'rounded',
-            },
-            win_options = {
-              winhighlight = 'Normal:Normal,FloatBorder:FloatBorder',
-            },
-          },
-          hooks = {
-            before_mount = function(input)
-              -- code
-            end,
-            after_mount = function(input)
-              -- code
-            end,
-            set_keymaps = function(imap, feedkeys)
-              -- code
-            end
-          }
-        })

-    end,
-    depends = {
-        {"MunifTanjim/nui.nvim"},
+
+    {   -- I am experimenting with not using this
+        "VonHeikemen/fine-cmdline.nvim",
+        enabled = false,
+        config = function()
+            require('fine-cmdline').setup({
+                cmdline = {
+                    enable_keymaps = true,
+                    smart_history = true,
+                    prompt = ': '
+                },
+                popup = {
+                    position = {
+                        row = '50%',
+                        col = '50%',
+                    },
+                    size = {
+                        width = '60%',
+                    },
+                    border = {
+                        style = 'rounded',
+                    },
+                    win_options = {
+                        winhighlight = 'Normal:Normal,FloatBorder:FloatBorder',
+                    },
+                },
+                hooks = {
+                    before_mount = function(input)
+                        -- code
+                    end,
+                    after_mount = function(input)
+                        -- code
+                    end,
+                    set_keymaps = function(imap, feedkeys)
+                        -- code
+                    end
+                }
+            })
+
+        end,
+        depends = {
+            {"MunifTanjim/nui.nvim"},

         },
     }
-    --{"vimpostor/vim-tpipeline"
-
-    --}
-    -- {"lifer0se/ezbookmarks.nvim", config = function()
-    --     require('ezbookmarks').setup{
-    --         cwd_on_open = 1,        -- change directory when opening a bookmark
-    --         use_bookmark_dir = 0,   -- if a bookmark is part of a bookmarked directory, cd to that direcrtory (works independently of cwd_on_open)
-    --         open_new_tab = 0,       -- open bookmark in a new tab.
-    --     }
-    -- end
-    -- }
-  -- { 'lukas-reineke/indent-blankline.nvim', config = function()
-  --   require("indent_blankline").setup {
-  --     show_current_context = true,
-  --     show_current_context_start = false,
-  --   }
-  -- end
-  -- }
-  -- ,
-  -- {"nvim-tree/nvim-web-devicons", config = function()
-  --   require("nvim-web-devicons").set_default_icon('-', '#6d8086', 65)
-  -- end
-  -- }
 }
diff --git a/lua/plugins/vim-jukit.lua b/lua/plugins/vim-jukit.lua
new file mode 100644
index 0000000..f356372
--- /dev/null
+++ b/lua/plugins/vim-jukit.lua
@@ -0,0 +1,6 @@
+return {
+    {
+        "luk400/vim-jukit",
+        enabled = false
+    }
+}
diff --git a/lua/plugins/welcome-screen.lua b/lua/plugins/welcome-screen.lua
index 89284a4..48b20c7 100644
--- a/lua/plugins/welcome-screen.lua
+++ b/lua/plugins/welcome-screen.lua
@@ -1,99 +1,71 @@
 return {
-  -- dashboard to greet
-  { 'goolord/alpha-nvim',
-    dependencies = { 'nvim-tree/nvim-web-devicons'},
-    config = function()
-      local alpha = require("alpha")
-      local dashboard = require("alpha.themes.dashboard")
-      local tree = require("nvim-tree")
+    -- dashboard to greet
+    { 'goolord/alpha-nvim',
+        dependencies = { 'nvim-tree/nvim-web-devicons'},
+        config = function()
+            local alpha = require("alpha")
+            local dashboard = require("alpha.themes.dashboard")
+            local tree = require("nvim-tree")

-      -- Set header
-      dashboard.section.header.val = {
-        " ███╗   ██╗███████╗ ██████╗ ██╗   ██╗██╗███╗   ███╗ ",
-        " ████╗  ██║██╔════╝██╔═══██╗██║   ██║██║████╗ ████║ ",
-        " ██╔██╗ ██║█████╗  ██║   ██║██║   ██║██║██╔████╔██║ ",
-        " ██║╚██╗██║██╔══╝  ██║   ██║╚██╗ ██╔╝██║██║╚██╔╝██║ ",
-        " ██║ ╚████║███████╗╚██████╔╝ ╚████╔╝ ██║██║ ╚═╝ ██║ ",
-        " ╚═╝  ╚═══╝╚══════╝ ╚═════╝   ╚═══╝  ╚═╝╚═╝     ╚═╝ ",
-        "     ____ 󱉟  󰯆  󰋄  󰓥  󰢫  󰴒  󰻀      󰟔   ____      ",
-        "                                                    ",
-        "                 󰓠  Thad Edition                    ",
+            -- Set header
+            dashboard.section.header.val = {
+                " ███╗   ██╗███████╗ ██████╗ ██╗   ██╗██╗███╗   ███╗ ",
+                " ████╗  ██║██╔════╝██╔═══██╗██║   ██║██║████╗ ████║ ",
+                " ██╔██╗ ██║█████╗  ██║   ██║██║   ██║██║██╔████╔██║ ",
+                " ██║╚██╗██║██╔══╝  ██║   ██║╚██╗ ██╔╝██║██║╚██╔╝██║ ",
+                " ██║ ╚████║███████╗╚██████╔╝ ╚████╔╝ ██║██║ ╚═╝ ██║ ",
+                " ╚═╝  ╚═══╝╚══════╝ ╚═════╝   ╚═══╝  ╚═╝╚═╝     ╚═╝ ",
+                "     ____ 󱉟  󰯆  󰋄  󰓥  󰢫  󰴒  󰻀      󰟔   ____      ",
+                "                                                    ",
+                "                 󰓠  Thad Edition                    ",

-      }
+            }

---       dashboard.section.header.val = {
---            "                              .............                                   ",
---            "                        ..';;,...       .....   .......                       ",
---            "                       ''.'...              ';'..........                     ",
---            "                       ..';,.',.         .,::c;.        ..                    ",
---            "                          .;,'.         .::.            ';......              ",
---            "                       .''::;;,.     ....              ,:'     ..             ",
---            "                       .;c,'ldlc;.    ...;'  ..       .;.       '.            ",
---            "                       ... 'loc:ll.  ',';lc,'...'.    ,.        ..            ",
---            "                     ...   'dddkd:..:c::lc::'.';;.   .,.       ..             ",
---            "                   ...     ;oo:'   ,;,okdc.;:''.     .'       .:;.            ",
---            "                 ...       ..     .cllodl::od:.      :l'..    ....'.          ",
---            "              ....               .;ldllol;..lc.....  :l.          .'.         ",
---            "           .....                  ,;',ldc. .l,   .;:,::.          .'          ",
---            "          .;;..........cl:::.    .c,  ,c'  ,o;.  .;c:.'.         .'.          ",
---            "                       ;doxx'   .c:   ....'c:,. .'.,. '.        .'.           ",
---            "                       cOk0O,   ,;        .',;;.;:c:. .'. ..  .,:'            ",
---            "                   ...,xKKKd.  .'.          ,clokxl;.. .....    .'.           ",
---            "                 ..;ooloodx:                 .;cl,               .'.          ",
---            "                         .:.                 ...,.        ..   ..'.           ",
---            "                         .:.                   .,.         ......             ",
---            "                         .;.                   ..                             ",
---            "                         .;.                                                  ",
---            "                         .;'                                                  ",
---            "                          ,,                                                  ",
---            "                          ';.                                                 ",
---            "                          .;'                                                 ",
---            "                           ..                                                 "
---         }

-        -- Set menu
-        dashboard.section.buttons.val = {
-        dashboard.button("b", "󰂺  > Bookmarks", ":TelescopeBookmarks<CR>"),
-        dashboard.button("e", "  > New file", ":ene <BAR> startinsert <CR>"),
-        dashboard.button("f", "󱉶  > Find file", ":Telescope find_files<CR>"),
-        dashboard.button("h", "󱉽  > Vault Home",
-                    ":e /home/thadryan/Documents/Vault/neorg-overview.norg<CR> | :Neotree dir=%:p:h<CR> | :buffer 3 <CR>" ),
-        dashboard.button("q", "󰩈 > Quit NVIM", ":qa<CR>"),
-        dashboard.button("r", "  > Recent", ":Telescope oldfiles <CR>"),
-        dashboard.button("s", "  > Settings", ":e $MYVIMRC | :cd %:p:h<cr>"),
-        dashboard.button("u", "  > Update plugins", ":Lazy update<CR>"),
-      }
+            -- Set menu
+            dashboard.section.buttons.val = {
+                dashboard.button("b", "󰂺  > Bookmarks", ":TelescopeBookmarks<CR>"),
+                dashboard.button("e", "  > New file", ":ene <BAR> startinsert <CR>"),
+                dashboard.button("f", "󱉶  > Find file", ":Telescope find_files<CR>"),
+                dashboard.button("h", "󱉽  > Vault Home",
+                    ":e /home/thadryan/Documents/Vault/workspaces-overview.md<CR> | :Neotree dir=%:p:h<CR> | :buffer 3 <CR>" ),
+                dashboard.button("q", "󰩈 > Quit NVIM", ":qa<CR>"),
+                dashboard.button("r", "  > Recent", ":Telescope oldfiles <CR>"),
+                dashboard.button("s", "  > Settings", ":e $MYVIMRC | :cd %:p:h<cr>"),
+                dashboard.button("u", "  > Update plugins", ":Lazy update<CR>"),
+                dashboard.button("w", "  > Workspaces", ":Telescope workspaces<CR>"),
+            }

-      local fortune = require("alpha.fortune")
-      dashboard.section.footer.val = fortune({
-        fortune_list = {
+            local fortune = require("alpha.fortune")
+            dashboard.section.footer.val = fortune({
+                fortune_list = {

-            { "'I tell you, we are here on Earth to fart around, and don't let anybody tell you different.'",
+                    { "'I tell you, we are here on Earth to fart around, and don't let anybody tell you different.'",
                         "", "— Kurt Vonnegut, 'A Man Without a Country.'" },

-            { "'It's a terrible waste to be happy and not notice it.'",
+                    { "'It's a terrible waste to be happy and not notice it.'",
                         "", "— Kurt Vonnegut" },

-            { "'We are what we pretend to be, so we must be careful what we pretend to be.'",
+                    { "'We are what we pretend to be, so we must be careful what we pretend to be.'",
                         "", "— Kurt Vonnegut" },

-            {"'As stupid and vicious as men are, this is a lovely day.'",
+                    {"'As stupid and vicious as men are, this is a lovely day.'",
                         "", "- Kurt Vonnegut"},

-            {"'If Jesus was alive today, we would kill him with lethal injection. I call that progress. We would have to kill him for the same reason he was killed the first time. His ideas are just too liberal.'", "- Kurt Vonnegut"},
+                    {"'If Jesus was alive today, we would kill him with lethal injection. I call that progress. We would have to kill him for the same reason he was killed the first time. His ideas are just too liberal.'", "- Kurt Vonnegut"},

-            {"'Hello babies. Welcome to Earth. It's hot in the summer and cold in the winter. It's round and wet and crowded. On the outside, babies, you've got a hundred years here. There's only one rule that I know of, babies-God damn it, you've got to be kind.'", "- Kurt Vonnegut"},
+                    {"'Hello babies. Welcome to Earth. It's hot in the summer and cold in the winter. It's round and wet and crowded. On the outside, babies, you've got a hundred years here. There's only one rule that I know of, babies-God damn it, you've got to be kind.'", "- Kurt Vonnegut"},

-            {"'We're here to get each other through this thing, whatever it is.'",
-                    "", "- Mark Vonnegut"},
+                    {"'We're here to get each other through this thing, whatever it is.'",
+                        "", "- Mark Vonnegut"},

-            {"'The most radical, audacious thing to think is that there might be some point to working hard and thinking hard and reading hard and writing hard and trying to be of service'", "-- Mark Vonnegut"}
+                    {"'The most radical, audacious thing to think is that there might be some point to working hard and thinking hard and reading hard and writing hard and trying to be of service'", "-- Mark Vonnegut"}

-        }
-      })
+                }
+            })

-      -- Send config to alpha
-      alpha.setup(dashboard.opts)
-    end
-  },
+            -- Send config to alpha
+            alpha.setup(dashboard.opts)
+        end
+    },
 }
diff --git a/lua/plugins/workspaces.lua b/lua/plugins/workspaces.lua
index b1a9678..c4af25f 100644
--- a/lua/plugins/workspaces.lua
+++ b/lua/plugins/workspaces.lua
@@ -1,51 +1,10 @@
 return {
-    {"natecraddock/workspaces.nvim", config = function()
+    {"natecraddock/workspaces.nvim",
+    config = function()
         require("workspaces").setup({
             path = "/home/thadryan/Documents/Templates/workspaces.txt"
-
         })
     end
     }
-}

-
--- return {
---   { 'gnikdroy/projections.nvim',
---     keys = {
---       { '<leader>fp',  function() vim.cmd("Telescope projections") end },
---     },
---     config = function()
---
---       vim.opt.sessionoptions:append("localoptions") -- Save localoptions to session file
---       require("projections").setup {
---         store_hooks = {
---           pre = function()
---             -- nvim-tree
---             local nvim_tree_present, api = pcall(require, "nvim-tree.api")
---             if nvim_tree_present then api.tree.close() end
---
---             -- neo-tree
---             if pcall(require, "neo-tree") then vim.cmd [[Neotree action=close]] end
---           end
---         }
---       }
---
---       -- Bind <leader>fp to Telescope projections
---       require('telescope').load_extension('projections')
---
---       -- Autostore session on VimExit
---       local Session = require("projections.session")
---       vim.api.nvim_create_autocmd({ 'VimLeavePre' }, {
---         callback = function() Session.store(vim.loop.cwd()) end,
---       })
---
---       -- Switch to project if vim was started in a project dir
---       local switcher = require("projections.switcher")
---       vim.api.nvim_create_autocmd({ "VimEnter" }, {
---         callback = function()
---           if vim.fn.argc() == 0 then switcher.switch(vim.loop.cwd()) end
---         end,
---       })
---     end
---   }
--- }
+}

